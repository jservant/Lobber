//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Settings/InputClasses/DebugActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugActions"",
    ""maps"": [
        {
            ""name"": ""DebugTools"",
            ""id"": ""2cb31f18-a3a3-47ca-9cd2-2f5a2684c6db"",
            ""actions"": [
                {
                    ""name"": ""SpawnEnemy"",
                    ""type"": ""Button"",
                    ""id"": ""53605756-c6e6-40f1-83a8-7a17aa73fff1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLocation"",
                    ""type"": ""Value"",
                    ""id"": ""163143e1-2f33-4c1d-9163-df86f7d3161c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchScene"",
                    ""type"": ""Button"",
                    ""id"": ""76d5a4e2-362b-4c47-b643-cee2f69d36fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""359e838e-7a56-4fc7-a5fc-ad950100b6f1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnEnemy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19173ce2-ee0a-4adb-a4f2-e5fc1103efb0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1212477-ca47-46ef-a6a9-005c9409d872"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""M&K"",
                    ""action"": ""SwitchScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e50be28-a9e7-47c8-9bac-3bd451651b44"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""M&K"",
            ""bindingGroup"": ""M&K"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DebugTools
        m_DebugTools = asset.FindActionMap("DebugTools", throwIfNotFound: true);
        m_DebugTools_SpawnEnemy = m_DebugTools.FindAction("SpawnEnemy", throwIfNotFound: true);
        m_DebugTools_MouseLocation = m_DebugTools.FindAction("MouseLocation", throwIfNotFound: true);
        m_DebugTools_SwitchScene = m_DebugTools.FindAction("SwitchScene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DebugTools
    private readonly InputActionMap m_DebugTools;
    private List<IDebugToolsActions> m_DebugToolsActionsCallbackInterfaces = new List<IDebugToolsActions>();
    private readonly InputAction m_DebugTools_SpawnEnemy;
    private readonly InputAction m_DebugTools_MouseLocation;
    private readonly InputAction m_DebugTools_SwitchScene;
    public struct DebugToolsActions
    {
        private @DebugActions m_Wrapper;
        public DebugToolsActions(@DebugActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnEnemy => m_Wrapper.m_DebugTools_SpawnEnemy;
        public InputAction @MouseLocation => m_Wrapper.m_DebugTools_MouseLocation;
        public InputAction @SwitchScene => m_Wrapper.m_DebugTools_SwitchScene;
        public InputActionMap Get() { return m_Wrapper.m_DebugTools; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugToolsActions set) { return set.Get(); }
        public void AddCallbacks(IDebugToolsActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugToolsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugToolsActionsCallbackInterfaces.Add(instance);
            @SpawnEnemy.started += instance.OnSpawnEnemy;
            @SpawnEnemy.performed += instance.OnSpawnEnemy;
            @SpawnEnemy.canceled += instance.OnSpawnEnemy;
            @MouseLocation.started += instance.OnMouseLocation;
            @MouseLocation.performed += instance.OnMouseLocation;
            @MouseLocation.canceled += instance.OnMouseLocation;
            @SwitchScene.started += instance.OnSwitchScene;
            @SwitchScene.performed += instance.OnSwitchScene;
            @SwitchScene.canceled += instance.OnSwitchScene;
        }

        private void UnregisterCallbacks(IDebugToolsActions instance)
        {
            @SpawnEnemy.started -= instance.OnSpawnEnemy;
            @SpawnEnemy.performed -= instance.OnSpawnEnemy;
            @SpawnEnemy.canceled -= instance.OnSpawnEnemy;
            @MouseLocation.started -= instance.OnMouseLocation;
            @MouseLocation.performed -= instance.OnMouseLocation;
            @MouseLocation.canceled -= instance.OnMouseLocation;
            @SwitchScene.started -= instance.OnSwitchScene;
            @SwitchScene.performed -= instance.OnSwitchScene;
            @SwitchScene.canceled -= instance.OnSwitchScene;
        }

        public void RemoveCallbacks(IDebugToolsActions instance)
        {
            if (m_Wrapper.m_DebugToolsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugToolsActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugToolsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugToolsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugToolsActions @DebugTools => new DebugToolsActions(this);
    private int m_MKSchemeIndex = -1;
    public InputControlScheme MKScheme
    {
        get
        {
            if (m_MKSchemeIndex == -1) m_MKSchemeIndex = asset.FindControlSchemeIndex("M&K");
            return asset.controlSchemes[m_MKSchemeIndex];
        }
    }
    public interface IDebugToolsActions
    {
        void OnSpawnEnemy(InputAction.CallbackContext context);
        void OnMouseLocation(InputAction.CallbackContext context);
        void OnSwitchScene(InputAction.CallbackContext context);
    }
}
